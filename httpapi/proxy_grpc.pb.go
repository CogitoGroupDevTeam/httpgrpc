// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package httpapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ExposedServiceClient is the client API for ExposedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExposedServiceClient interface {
	// Proxies a message to the internal GRPC API
	Proxy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type exposedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExposedServiceClient(cc grpc.ClientConnInterface) ExposedServiceClient {
	return &exposedServiceClient{cc}
}

func (c *exposedServiceClient) Proxy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/httpapi.ExposedService/Proxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExposedServiceServer is the server API for ExposedService service.
// All implementations must embed UnimplementedExposedServiceServer
// for forward compatibility
type ExposedServiceServer interface {
	// Proxies a message to the internal GRPC API
	Proxy(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedExposedServiceServer()
}

// UnimplementedExposedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExposedServiceServer struct {
}

func (UnimplementedExposedServiceServer) Proxy(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (UnimplementedExposedServiceServer) mustEmbedUnimplementedExposedServiceServer() {}

// UnsafeExposedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExposedServiceServer will
// result in compilation errors.
type UnsafeExposedServiceServer interface {
	mustEmbedUnimplementedExposedServiceServer()
}

func RegisterExposedServiceServer(s *grpc.Server, srv ExposedServiceServer) {
	s.RegisterService(&_ExposedService_serviceDesc, srv)
}

func _ExposedService_Proxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExposedServiceServer).Proxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpapi.ExposedService/Proxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExposedServiceServer).Proxy(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExposedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httpapi.ExposedService",
	HandlerType: (*ExposedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Proxy",
			Handler:    _ExposedService_Proxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}
